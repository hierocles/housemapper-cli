#!/usr/bin/env node
Error.stackTraceLimit = 0;

var d3 = require('d3')
  , fs = require('pn/fs')
  , govTrack = require('govtrack-node')
  , jsdom = require('jsdom')
  , topojson = require('topojson')
  , xmljs = require('xml-js')
  , congressVotes = {}
  , stateToFips = {
      "AK": "2",
      "AL": "1",
      "AR": "5",
      "AZ": "4",
      "CA": "6",
      "CO": "8",
      "CT": "9",
      "DE": "10",
      "FL": "12",
      "GA": "13",
      "HI": "15",
      "IA": "19",
      "ID": "16",
      "IL": "17",
      "IN": "18",
      "KS": "20",
      "KY": "21",
      "LA": "22",
      "MA": "25",
      "MD": "24",
      "ME": "23",
      "MI": "26",
      "MN": "27",
      "MO": "29",
      "MS": "28",
      "MT": "30",
      "NC": "37",
      "ND": "38",
      "NE": "31",
      "NH": "33",
      "NJ": "34",
      "NM": "35",
      "NV": "32",
      "NY": "36",
      "OH": "39",
      "OK": "40",
      "OR": "41",
      "PA": "42",
      "RI": "44",
      "SC": "45",
      "SD": "46",
      "TN": "47",
      "TX": "48",
      "UT": "49",
      "VA": "51",
      "VI": "78",
      "VT": "50",
      "WA": "53",
      "WI": "55",
      "WV": "54",
      "WY": "56"
    };


function errormsg(msg) {
  console.log('Error: ' + msg);
  process.exit();
}

var argv = require('yargs')
    .usage('Basic usage: housemapper -c [num] -b [num]')
    .demand(['c', 'b'])
    .example('housemapper -c 114 -b 4038', 'Generate a map of votes on H.R. 4038')
    .describe('c', 'Congress number')
    .describe('b', 'House bill number')
    .describe('f', 'Custom file name ending in .svg (default: output.svg), either exact path or in current directory')
    .describe('w', 'Custom canvas width in pixels (default: 960)')
    .describe('h', 'Custom canvas height in pixels (default: 500)')
    .describe('s', 'Custom CSS stylesheet')
    .describe('force', 'Force use of specific Congress topojson file')
    .help('help')
    .argv;

if(argv.c > 0 && argv.b > 0) {
  var inputFileName = argv.f || 'output.svg';
  var inputWidth = argv.w || 960;
  var inputHeight = argv.h || 500;
  var inputCssFile = argv.s || 'default.css';

  if(argv.force > 0) {
    var topojsonFile = __dirname + '/jsonfiles/us-cong-' + argv.force + '.json';
  }
  else {
    var topojsonFile = __dirname + '/jsonfiles/us-cong-' + argv.c + '.json';
  }

  try {
    fs.accessSync(topojsonFile, fs.F_OK);
    run(argv.c, argv.b);
  } catch (e) {
    errormsg('Error: No topojson data for specified Congress in bin/jsonfiles directory. Expecting file: ' + topojsonFile);
  }
}


function run(congNum, billNum) {

  // Grab general bill information from govtrack/api/bill
  govTrack.findBill({ congress: congNum, bill_type: 'house_bill', number: billNum}, function(error, result) {
    if (!error) {

      // Make sure the API has returned usable data
      if(typeof result.objects[0] !== 'undefined') {

        // We need to get the last major action...
        var index = result.objects[0].major_actions.length - 1;
        var json = xmljs.xml2js(result.objects[0].major_actions[index][3], {compact: true});

        // ... which needs to have a 'vote' property with a 'where' attr of 'h'
        if(json.hasOwnProperty('vote') !== 'true') {
          // Try again...
          index = index - 1;

          if(index < 0) {
            errormsg('According to GovTrack, this bill hasn\'t been voted on yet!');
          }

          json = xmljs.xml2js(result.objects[0].major_actions[index][3], {compact: true});

          if(json.hasOwnProperty('vote')) {
            if(json.vote._attributes.where !== 'h') {
              index = index - 1;
              json = xmljs.xml2js(result.objects[0].major_actions[index][3], {compact: true});
            }
          }
        }

        // If after doing the above, no 'vote' property is found, then no vote has happened (probably)
        if(typeof json.vote !== 'undefined') {
          var rollCallNumber = json.vote._attributes.roll;
          var sessionYear = new Date(json.vote._attributes.datetime).getFullYear();

          // We need a roll call vote. No roll call vote indicates unanimous consent
          if(rollCallNumber > 0) {

            // Grab general vote information from govtrack/api/vote
            govTrack.findVote({congress: congNum, chamber: 'house', session: sessionYear, number: rollCallNumber}, function(error, result) {
              if (!error) {
                var voteID = result.objects[0].id;

                // Grab all individual House member votes from govtrack/api/votevoter
                govTrack.findVoteVoter({vote: voteID, limit: 441}, function(error, result) {
                  if(!error) {
                    for(var i = 0; i < result.objects.length; i++) {

                      // Get FIPS state + congressional district code
                      var fips = stateToFips[result.objects[i].person_role.state].toString() + result.objects[i].person_role.district.toString();

                      congressVotes[fips] = {
                        "state": result.objects[i].person_role.state,
                        "vote": result.objects[i].option.value,
                        "party": result.objects[i].person_role.party
                      };
                    }

                    // Run map generator
                    makeMap();
                  }
                });
              }
            });
          }
          else {
            errormsg('No roll call vote number found! This was possibly a unanimous voice vote, or no vote has occurred yet.');
          }
        }
        else {
          errormsg('According to GovTrack, this bill hasn\'t been voted on yet!');
        }
      }
      else {
        errormsg('Error in fetching data from GovTrack. Check Congress number and bill number are valid?');
      }
    }
    else {
      errormsg('Error in fetching data from GovTrack. Check Congress number and bill number are valid?');
    }
  });
}

function getColor(d) {
  // Does ID exist? If not, set to 0, which indicates at-large district
  d.id = d.id || 0;

  // State FIPS codes can be 1 or 2 digits
  var state = d.id < 1000 ? d.id.toString().charAt(0) : d.id.toString().substr(0,2);
  var cd = ((d.id % 100) > 0 ? (d.id % 100) : 0).toString();
  var fips = state + cd;

  if(typeof congressVotes[fips] !== 'undefined') {
    if(congressVotes[fips].vote == 'Aye' || congressVotes[fips].vote == 'Yea') {
      if(congressVotes[fips].party == 'Republican') {
        return 'district-rep-yes';
      }
      else if(congressVotes[fips].party == 'Democrat') {
        return 'district-dem-yes';
      }
      else {
        return 'district-yes';
      }
    }
    else if(congressVotes[fips].vote == 'No' || congressVotes[fips].vote == 'Nay') {
      if(congressVotes[fips].party == 'Republican') {
        return 'district-rep-no';
      }
      else if(congressVotes[fips].party == 'Democrat') {
        return 'district-dem-no';
      }
      else {
        return 'district-no';
      }
    }
    else {
      return 'district';
    }
  }
  else {
    // If Congressional seat is vacant, there will be no congressVotes entry
    return 'district';
  }
}

function makeMap() {
  var document = jsdom.jsdom();

  var us = JSON.parse(fs.readFileSync(__dirname + '/jsonfiles/us.json', 'utf8'));
  var congress = JSON.parse(fs.readFileSync(topojsonFile, 'utf8'));
  var css = fs.readFileSync(__dirname + '/styles/' + inputCssFile, 'utf8');

  var width = inputWidth,
      height = inputHeight;

  var projection = d3.geo.albersUsa()
      .scale(width)
      .translate([width/2, height/2]);

  var path = d3.geo.path()
      .projection(projection);

  var svg = d3.select(document.body).append('svg')
      .attr('xmlns', 'http://www.w3.org/2000/svg')
      .attr('xmlns:xlink', 'http://www.w3.org/1999/xlink')
      .attr('width', width)
      .attr('height', height);

      svg.append("rect")
          .attr("class", "background")
          .attr("width", width)
          .attr("height", height);

  var defs = svg.append('defs');

      defs.append('path')
        .attr('id', 'land')
        .datum(topojson.feature(us, us.objects.land))
        .attr('d', path);

      defs.append('style')
          .attr('type', 'text/css')
          .text(css);

      defs.append('clipPath')
          .attr('id', 'clip-land')
        .append('use')
          .attr(':xlink:href', '#land');

  var g = svg.append('g');

      g.attr('clip-path', 'url(#clip-land)')
        .selectAll('path')
          .data(topojson.feature(congress, congress.objects.districts).features)
        .enter().append('path')
          .attr('d', path)
          .attr('class', function(d) { return getColor(d); });

      g.append('path')
        .datum(topojson.mesh(congress, congress.objects.districts, function(a, b) { return a !== b && (a.id / 1000 | 0) === (b.id / 1000 | 0); }))
        .attr('class', 'district-boundaries')
        .attr('d', path);

      g.append('path')
        .datum(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; }))
        .attr('class', 'state-boundaries')
        .attr('d', path);

  var output = d3.select(document.body).html().replace(/clippath/g, 'clipPath');

  fs.writeFileSync(inputFileName, output);
}
